//
//  Eric Pratt, Aditya Khandkar
//

typedef int bool;
const bool true = 1;
const bool false = 0;

const int DELAY = 10000;
const int DOWNSTREAM = 0;
const int UPSTREAM = 1;
const int GATE1 = 1;
const int GATE2 = 2;

int id_up = -1;
int id_down = -1;

// return a unique ID based on direction of travel.
atomic int getId(int dir){
  if(dir == UPSTREAM) return ++id_up;
  if(dir == DOWNSTREAM) return ++id_down;

  // error
  return -1;
}

atomic void print(string msg){
  cout << msg << endl;
}

void pause(){
  int i, delay;
  delay = random(DELAY);
  while(i++ < delay);
}


//               Gate 1           Gate 2
//
//                --                --
//DOWNSTREAM -->  ||                ||
//################||                ||
//                ||     LOCK       ||
//                ||                ||    <-- UPSTREAM
//       WATER    ||################||##################
//                ||                ||
//                ||     WATER      ||     WATER
//--------------------------------------------------------

monitor ControlTower {
  condition lock_empty;
  condition lock_full;
  condition lock_occupied;

  int q_upstream[64];
  int q_downstream[64];

  //string msg;
  //string prefix;

  void fill(){
    waitc(lock_empty);
  }
  
  void drain(){

  }
 
  void arrive(int ship, int gate){							

    /*
    if(gate == GATE1) // downstream ships approach gate 1
      stringCopy(prefix, "D");
    else
      stringCopy(prefix, "U");

    sprintf(msg, "%s_%d is approaching gate %d",prefix,ship,gate);
    print(msg);
    */
    
  }

  int finish;

  init {
    finish = 0;
  }
}

void downstream(int pid){
  int i, id;
  for(i = 0;i < 5;i++){
    id = getId(DOWNSTREAM);
    arrive(id, GATE1);
  }
}

void upstream(int pid){
  int i, id;
  for(i = 0;i < 5;i++){
    id = getId(UPSTREAM);
    arrive(id, GATE2);
  }
}

// 
void waterlevel(int pid){
  fill();

  drain();
}

main(){

  cobegin{
    waterlevel(0); // 0 -> water level process.
    upstream(1);// upstream(3), upstream(5), upstream(7), upstream(9), upstream(11), upstream(13), upstream(15), 
    downstream(2); 
    //, downstream(4), downstream(6), downstream(8), downstream(10), downstream(12), downstream(14), downstream(16)
  }
}